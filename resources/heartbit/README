------------------------------------------------------------------

This is 'heartbit', a redacted version of the portions of
openssl-1.0.1f that cause the now infamous "heartbleed"
exploit to expose private memory of any process running
a exploitable version of openssl.

It easily compiles & runs on several current unix / linux boxes,
including cygwin on win32.

------------------------------------------------------------------

/*
 * HeartBit -- the HeartBeat Simulator Framework
 *
 * Copyright (C) 2014 Bolo -- Josef T. Burger
 *
 * All original work here is distributed via a BSD license terms.
 * Basically you are free to use it and you can't take credit for it.
 */

------------------------------------------------------------------

The redacted simulator uses actual untouched excerpts from original
openssl code to do EXACT heartbeat message processing and generation.
Other exact code are the openssl read and write buffers and their
allocation sizes, which are important to understand due to the memory
access nature of the heartbleed leaks.

The rest of the "simulator" consists of a bare-bones framework that
supports the several data structures and members of the openssl code
necessary to run-in-place the actual openssl code.

To simulate most of the data handling and manipulation done by openssl
which make this code more difficult to analyze, a minimal framework
of openssl structures, buffers and records and "pointers" are used
an manipulated in a compatible fashion.

Simulated packets are an echo of the EXACT format of real ssl packets;
with identical headers, etc.   Simplified versions of encryption
data handling (bit inversion), random padding, and MAC (both via
fixed string) are used to make similar data handling characteristics
without introducing the complexity of those openssl systems.

These things, however, create quite similar memory access and writing
and reading patterns which simulate how openssl does data handling,
and obfuscates whether data is from an untrusted source, or converted
to a "trusted" format.

------------------------------------------------------------------

"Packets" 

We don't do network I/O.  Instead, pre-generated heartbeat packets
are read from stdin by the simulator, and then processed.

Instead of transmitting the "heartbleed" with a network packet,
a printf to stdout is used to illustrate memory accessed from
prior transactions and other memory regions.

Please be aware that this code is known as BUGGY by definition, as is
the original openssl code with the bug.  The program can crash from
accessing data not allocated, heap guards around allocated regions
could be encountered and set off program termination, or other regions
of program memory could be accessed, creating unintended results.
USE AT YOUR OWN RISK!

In addition to the I/O buffer memory, the simulator also allocates
other memory to try and create ASCII-labelled regions of memory which
can be viewed easily as text output.

Occasionally you will see chunks for non-ASCII memory in the output.
This is not displayed as binary, but as a '.'  This is memory 
between the allocated objects, containing malloc headers and other
data that should not be visible, but is with "heartbleed".

------------------------------------------------------------------

The redacted code examples and test harness are in ./
in the simulator:

	README		This file
	README.html	HTML-ified version of readme for browsers
	Makefile	compile simulator and run -- type 'help' for some info
	red.h		simulator header file
	red.c		simulator itself
	s3_red_both.c	redacted openssl s3_both.c w/ abbreviated copyright
	t1_red_lib.c	redacted openssl t1_lib.c w/ abbreviated copyright
	SSL_COPYRIGHT	FULL SSL COPYRIGHTS for the the redacted openssl files

In addition a set of pre-generated input packets is present in the
inputs/ subdirectory.  These include a valid heartbeat packet as
generated by exact openssl heartbeat code.   The rest of the packets
are different length "heartbleed" packets.

	inputs/
		heartbeat	-- as intended heartbeat packet
		heartbleed0	-- small line-length heartbleed example
		heartbleed1
		heartbleed2
		heartbleed3	-- huge max-length heartbleed example
		heartbleed-48k	-- example of a specified-length heartbleed


The generator for the packets is also included, in the ./gen subdirectory:

	gen/
		README		-- description of ssl functions used in-situ
		Makefile	-- including help on options
		gen.c		-- packet generator

------------------------------------------------------------------

You can run the simulator "by hand" on any ssl-like packet generated
by the gen tool via:

	./red < packet-file | more
or	./red < packet-file >output-file ; more output-file

I recommend placing the output through a pager or into a file to view,
as the "stolen" data can be length.  The output is processed to be
viewable ascii, instead of dumping binary data on the output!

------------------------------------------------------------------
